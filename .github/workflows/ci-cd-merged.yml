# Force workflow refresh - 2025-05-07
name: CustomerAI Unified CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Unit & Lint Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install dependencies
        shell: bash
        run: |
          # Upgrade pip and core tools
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel

          # Clear pip cache
          python -m pip cache purge

          # Install core test dependencies one by one to avoid conflicts
          pip install --no-cache-dir pytest==8.0.0
          pip install --no-cache-dir pytest-cov==4.1.0
          pip install --no-cache-dir flake8==7.0.0
          pip install --no-cache-dir mypy==1.8.0
          pip install --no-cache-dir black==24.1.0

          # Install pinned version of critical dependencies
          pip install --no-cache-dir argon2-cffi-bindings==21.2.0
          pip install --no-cache-dir argon2-cffi==21.3.0

          # Install project dependencies
          if [ -f "requirements.txt" ]; then
            pip install --no-cache-dir -r requirements.txt
          fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Type check with mypy
        run: |
          mypy --ignore-missing-imports src/
      - name: Check formatting with black
        run: |
          black --check src/ tests/
      - name: Run unit tests with pytest
        run: |
          pytest tests/unit/ --cov=src/ --cov-report=xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run security scan with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
      - name: Check dependencies for vulnerabilities
        run: |
          safety check -r requirements.txt --json > safety-report.json
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install test dependencies
          pip install pytest pytest-cov
          # Install pinned version of argon2-cffi-bindings
          pip install argon2-cffi-bindings==21.2.0
          # Install project dependencies with constraints
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt --no-deps
            pip install -r requirements.txt
          fi
      - name: Run integration tests
        run: |
          pytest tests/integration/ --cov=src/ --cov-report=xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security-scan, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine setuptools
          pip install argon2-cffi-bindings==21.2.0
      - name: Build package
        run: |
          python -m build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/customerai:latest

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to Development
        run: echo "Deploying to development environment..."
        # Insert actual deployment steps here

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Deploy to Production
        run: echo "Deploying to production environment..."
        # Insert actual deployment steps here
