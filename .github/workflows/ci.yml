name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        # Upgrade pip and core tools
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel

        # Clear pip cache
        python -m pip cache purge

        # Install pinned version of critical dependencies
        pip install --no-cache-dir argon2-cffi-bindings==21.2.0
        pip install --no-cache-dir argon2-cffi==21.3.0

        # Install project dependencies
        if [ -f requirements.txt ]; then
          pip install --no-cache-dir -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then
          pip install --no-cache-dir -r requirements-dev.txt
        fi

    - name: Run security checks
      run: |
        pip install safety bandit
        safety check --full-report
        bandit -r src/

    - name: Run type checking
      run: |
        pip install mypy
        mypy src/ --strict

    - name: Run linting
      run: |
        pip install flake8
        flake8 src/ tests/

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan with safety
      run: |
        safety check --full-report

    - name: Security scan with pip-audit
      run: |
        pip install pip-audit
        pip-audit

    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy src --strict

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Security headers check
      run: |
        pip install security-headers
        security-headers .

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/master'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build -t customerai:latest .
        docker push customerai:latest

    - name: Docker security scan
      if: github.ref == 'refs/heads/master'
      run: |
        pip install trivy
        trivy image customerai:latest

    - name: Notify security team
      if: github.ref == 'refs/heads/master'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: 'New deployment to production with security scan results'
