name: CustomerAI CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]  # Using Python 3.10 for better package compatibility

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 mypy black
        # Install problematic dependencies first with specific versions
        pip install argon2-cffi-bindings==21.2.0
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports src/
    
    - name: Check formatting with black
      run: |
        black --check src/ tests/
    
    - name: Run unit tests with pytest
      run: |
        pytest tests/unit/ --cov=src/ --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10  # Using Python 3.10 for better package compatibility
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Install problematic dependencies first with specific versions
        pip install argon2-cffi-bindings==21.2.0
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --cov=src/ --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10  # Using Python 3.10 for better package compatibility
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install problematic dependencies first with specific versions
        pip install argon2-cffi-bindings==21.2.0
        pip install build twine wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10  # Using Python 3.10 for better package compatibility
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment"
        # Add deployment steps for your specific environment
        # For example, deploying to a development Kubernetes cluster
    
    - name: Run fairness dashboard
      run: |
        echo "Starting fairness dashboard in development environment"
        # Add steps to start the fairness dashboard

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10  # Using Python 3.10 for better package compatibility
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Add deployment steps for your specific environment
        # For example, deploying to a production Kubernetes cluster
    
    - name: Run fairness dashboard
      run: |
        echo "Starting fairness dashboard in production environment"
        # Add steps to start the fairness dashboard
